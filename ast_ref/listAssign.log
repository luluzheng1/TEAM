list<?> split(string text, char separator):
	list<?> result = [];
	int text_length = length(text);
	int left = 0;
	int right = 0;
	while right < text_length:
		if text[right] == separator:
			result = append(result, text[left:right]);
			right = right + 1;
			left = right;
		else:
			right = right + 1;
		end
	end
	result = append(result, text[left:right]);
	return result;
end

string join(list<?> text_list, string connector):
	string res = "";
	int list_length = length(text_list);
	for index in 0..list_length - 1:
		res = res + text_list[index] + connector;
	end
	res = res + text_list[list_length - 1];
	return res;
end

string string_reverse(string text):
	string res = "";
	int string_length = length(text);
	int index = string_length - 1;
	while index >= 0:
		res = res + text[index];
		index = index - 1;
	end
	return res;
end

bool startswith(string text, char s):
	return s == text[0];
end

bool endswith(string text, char e):
	int string_length = length(text);
	return e == text[string_length - 1];
end

list<?> string_to_list(string text):
	list<?> result = [];
	for c in text:
		result = append(result, c);
	end
	return result;
end

char lower(char c):
	int index = -1;
	for c_ref in ASCII:
		index = index + 1;
		if c == c_ref:
			if index < 26:
				return c;
			else:
				return ASCII[index - 26];
			end
		end
	end
	return c;
end

char upper(char c):
	int index = -1;
	for c_ref in ASCII:
		index = index + 1;
		if c == c_ref:
			if index > 25:
				return c;
			else:
				return ASCII[index + 26];
			end
		end
	end
	return c;
end

bool strcmp(string str1, string str2):
	if length(str1) != length(str2):
		return false;
	end
	int i = 0;
	while i < length(str1):
		char c1 = str1[i];
		char c2 = str2[i];
		if c1 != c2:
			return false;
		end
		i = i + 1;
	end
	return true;
end

bool contains(list<?> l, list<?> items):
	list<?> res = [];
	for item in items:
		res = append(res, false);
		for ref in l:
			if ref == item:
				res[length(res) - 1] = true;
			end
		end
	end
	for r in res:
		if not r:
			return false;
		end
	end
	return true;
end

list<?> remove_int(list<?> l, int elem, bool all):
	list<?> retlist = [];
	int i = 0;
	int len = length(l);
	int remove_index = 0;
	if all:
		while i < len:
			if l[i] == elem:
				i = i + 1;
				continue;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
	else:
		while i < len:
			if l[i] == elem:
				remove_index = i;
				break;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
		if i != len:
			for index in remove_index + 1..len:
				retlist = append(retlist, l[index]);
			end
		end
	end
	return retlist;
end

list<?> remove_float(list<?> l, float elem, bool all):
	list<?> retlist = [];
	int i = 0;
	int len = length(l);
	int remove_index = 0;
	if all:
		while i < len:
			if l[i] == elem:
				i = i + 1;
				continue;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
	else:
		while i < len:
			if l[i] == elem:
				remove_index = i;
				break;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
		if i != len:
			for index in remove_index + 1..len:
				retlist = append(retlist, l[index]);
			end
		end
	end
	return retlist;
end

list<?> remove_bool(list<?> l, bool elem, bool all):
	list<?> retlist = [];
	int i = 0;
	int len = length(l);
	int remove_index = 0;
	if all:
		while i < len:
			if l[i] == elem:
				i = i + 1;
				continue;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
	else:
		while i < len:
			if l[i] == elem:
				remove_index = i;
				break;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
		if i != len:
			for index in remove_index + 1..len:
				retlist = append(retlist, l[index]);
			end
		end
	end
	return retlist;
end

list<?> remove_char(list<?> l, char elem, bool all):
	list<?> retlist = [];
	int i = 0;
	int len = length(l);
	int remove_index = 0;
	if all:
		while i < len:
			if l[i] == elem:
				i = i + 1;
				continue;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
	else:
		while i < len:
			if l[i] == elem:
				remove_index = i;
				break;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
		if i != len:
			for index in remove_index + 1..len:
				retlist = append(retlist, l[index]);
			end
		end
	end
	return retlist;
end

list<?> remove_string(list<?> l, string elem, bool all):
	list<?> retlist = [];
	int i = 0;
	int len = length(l);
	int remove_index = 0;
	if all:
		while i < len:
			if strcmp(l[i], elem):
				i = i + 1;
				continue;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
	else:
		while i < len:
			if strcmp(l[i], elem):
				remove_index = i;
				break;
			end
			retlist = append(retlist, l[i]);
			i = i + 1;
		end
		if i != len:
			for index in remove_index + 1..len:
				retlist = append(retlist, l[index]);
			end
		end
	end
	return retlist;
end
list<?> ASCII = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z];
join(["hello"], "");
contains([1,2], [1]);
contains(["hello","wolrd"], ["hello"]);
contains([h,e], [h]);
contains([true,false], [true]);
contains([1.1,1.2], [1.1]);
remove_int([1], 1, true);
remove_float([1.5], 1.5, false);
remove_bool([true], true, true);
remove_char([a], a, true);
remove_string(["hello"], "what", true);
list<?> dorms = ["Carm","Sogo","Carpenter"];
for i in 0..2:
	dorms[i] = "Halligan";
end
