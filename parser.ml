type token =
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | COMMA
  | ARROW
  | COLON
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | EXP
  | ADDASN
  | SUBASN
  | MULASN
  | DIVASN
  | MODASN
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RANGE
  | AND
  | OR
  | IF
  | ELSEIF
  | ELSE
  | FOR
  | IN
  | DO
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | END
  | INT
  | FLOAT
  | BOOL
  | STRING
  | CHAR
  | VOID
  | LIST
  | BLIT of (bool)
  | LITERAL of (int)
  | FLIT of (float)
  | ID of (string)
  | CLIT of (char)
  | SLIT of (string)
  | EOL
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
let thrd (_, _, a) = a;;
# 64 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LSQUARE *);
  260 (* RSQUARE *);
  261 (* COMMA *);
  262 (* ARROW *);
  263 (* COLON *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* MOD *);
  269 (* EXP *);
  270 (* ADDASN *);
  271 (* SUBASN *);
  272 (* MULASN *);
  273 (* DIVASN *);
  274 (* MODASN *);
  275 (* ASSIGN *);
  276 (* NOT *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* RANGE *);
  284 (* AND *);
  285 (* OR *);
  286 (* IF *);
  287 (* ELSEIF *);
  288 (* ELSE *);
  289 (* FOR *);
  290 (* IN *);
  291 (* DO *);
  292 (* WHILE *);
  293 (* BREAK *);
  294 (* CONTINUE *);
  295 (* RETURN *);
  296 (* END *);
  297 (* INT *);
  298 (* FLOAT *);
  299 (* BOOL *);
  300 (* STRING *);
  301 (* CHAR *);
  302 (* VOID *);
  303 (* LIST *);
  310 (* EOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  304 (* BLIT *);
  305 (* LITERAL *);
  306 (* FLIT *);
  307 (* ID *);
  308 (* CLIT *);
  309 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\008\000\008\000\
\008\000\007\000\007\000\009\000\009\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\003\000\011\000\
\011\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\013\000\014\000\014\000\016\000\015\000\015\000\
\012\000\012\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\017\000\017\000\017\000\018\000\018\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\009\000\000\000\002\000\
\002\000\000\000\001\000\002\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\003\000\003\000\005\000\000\000\
\002\000\001\000\002\000\003\000\003\000\008\000\006\000\002\000\
\002\000\002\000\007\000\000\000\002\000\004\000\000\000\003\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\006\000\000\000\001\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\083\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\018\000\017\000\019\000\000\000\045\000\043\000\044\000\
\000\000\046\000\047\000\026\000\001\000\000\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\021\000\066\000\048\000\
\000\000\000\000\029\000\000\000\024\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\020\000\073\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\024\000\000\000\000\000\025\000\000\000\000\000\
\012\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\007\000\000\000\075\000\000\000\000\000\
\000\000\037\000\000\000\000\000\013\000\024\000\024\000\035\000\
\030\000\000\000\000\000\009\000\000\000\000\000\006\000"

let yydgoto = "\002\000\
\003\000\004\000\133\000\031\000\134\000\135\000\125\000\156\000\
\126\000\034\000\120\000\049\000\043\000\143\000\153\000\144\000\
\039\000\090\000\091\000"

let yysindex = "\023\000\
\000\000\000\000\000\000\001\000\197\001\194\255\194\255\194\255\
\194\255\194\255\194\255\230\254\243\254\194\255\000\000\000\000\
\000\000\000\000\000\000\000\000\059\255\000\000\000\000\000\000\
\253\255\000\000\000\000\000\000\000\000\255\254\000\000\000\000\
\000\255\051\003\021\255\009\004\194\255\090\004\122\255\002\255\
\002\255\153\003\039\255\237\003\181\003\000\000\000\000\090\004\
\052\255\003\255\194\255\194\255\194\255\194\255\194\255\194\255\
\194\255\000\000\003\255\017\255\194\255\194\255\194\255\194\255\
\194\255\194\255\194\255\194\255\194\255\194\255\194\255\194\255\
\194\255\194\255\194\255\194\255\000\000\000\000\000\000\000\000\
\194\255\054\255\000\000\194\255\000\000\000\000\003\255\014\255\
\090\004\108\255\112\255\110\000\110\000\110\000\110\000\110\000\
\090\004\114\255\003\255\194\255\036\004\056\000\056\000\004\255\
\004\255\004\255\002\255\164\000\164\000\179\255\179\255\179\255\
\179\255\090\004\110\000\117\004\090\004\000\000\209\003\120\255\
\000\000\000\000\194\255\032\255\133\255\117\255\085\003\000\000\
\194\255\174\255\000\000\087\255\255\254\000\000\034\255\090\004\
\000\000\088\255\003\255\000\000\063\004\194\255\113\255\124\255\
\108\000\000\000\157\255\000\000\037\255\000\000\119\003\127\255\
\140\255\000\000\130\255\162\000\000\000\000\000\000\000\000\000\
\000\000\131\255\255\254\000\000\216\000\216\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\126\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\132\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\255\000\000\227\255\
\066\001\000\000\000\000\000\000\000\000\000\000\000\000\139\255\
\000\000\000\000\197\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\255\000\000\198\255\179\001\214\002\218\002\252\002\004\003\
\030\255\001\255\199\255\000\000\000\000\249\001\027\002\090\255\
\134\001\168\001\100\001\172\002\206\002\061\002\095\002\129\002\
\163\002\144\255\013\003\028\000\134\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\200\255\000\000\000\000\
\000\000\249\254\000\000\000\000\000\000\000\000\000\000\102\255\
\000\000\000\000\000\000\000\000\000\000\000\000\156\255\249\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\001\000\000\246\254\168\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\000\000\254\255\004\000\000\000\000\000\
\000\000\005\000\234\255\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000"

let yytablesize = 1425
let yytable = "\030\000\
\029\000\032\000\022\000\087\000\061\000\059\000\061\000\033\000\
\035\000\036\000\038\000\040\000\041\000\042\000\044\000\045\000\
\067\000\099\000\048\000\059\000\038\000\038\000\078\000\001\000\
\036\000\022\000\059\000\046\000\074\000\038\000\074\000\067\000\
\036\000\067\000\067\000\100\000\067\000\059\000\121\000\059\000\
\047\000\036\000\059\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\060\000\022\000\058\000\088\000\003\000\089\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\067\000\
\067\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\050\000\137\000\067\000\147\000\117\000\081\000\157\000\
\119\000\081\000\035\000\051\000\083\000\051\000\051\000\130\000\
\051\000\051\000\051\000\051\000\051\000\051\000\124\000\082\000\
\127\000\086\000\082\000\118\000\145\000\122\000\051\000\051\000\
\051\000\051\000\051\000\051\000\123\000\051\000\051\000\059\000\
\005\000\139\000\006\000\051\000\051\000\080\000\081\000\136\000\
\007\000\076\000\076\000\077\000\077\000\141\000\138\000\165\000\
\166\000\078\000\078\000\008\000\146\000\148\000\149\000\051\000\
\152\000\063\000\151\000\063\000\063\000\009\000\063\000\163\000\
\010\000\164\000\142\000\011\000\012\000\013\000\014\000\132\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\005\000\100\000\
\006\000\063\000\063\000\160\000\159\000\061\000\007\000\161\000\
\167\000\041\000\062\000\063\000\064\000\065\000\066\000\067\000\
\042\000\008\000\037\000\039\000\006\000\063\000\079\000\080\000\
\010\000\011\000\007\000\009\000\142\000\074\000\010\000\040\000\
\154\000\011\000\012\000\013\000\014\000\008\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\064\000\000\000\064\000\064\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\064\000\
\064\000\064\000\064\000\064\000\064\000\051\000\064\000\064\000\
\000\000\005\000\000\000\006\000\064\000\064\000\000\000\000\000\
\000\000\007\000\052\000\053\000\054\000\055\000\056\000\057\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\061\000\009\000\061\000\
\061\000\010\000\061\000\000\000\011\000\012\000\013\000\014\000\
\000\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\003\000\
\061\000\003\000\061\000\000\000\000\000\061\000\061\000\003\000\
\000\000\064\000\065\000\066\000\067\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\074\000\000\000\003\000\000\000\000\000\003\000\
\000\000\000\000\003\000\003\000\003\000\003\000\000\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\000\000\006\000\000\000\
\061\000\000\000\000\000\000\000\007\000\062\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\009\000\000\000\000\000\010\000\000\000\000\000\011\000\
\012\000\013\000\014\000\155\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\005\000\000\000\006\000\000\000\061\000\000\000\
\000\000\000\000\007\000\062\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\009\000\
\000\000\000\000\010\000\000\000\000\000\011\000\012\000\013\000\
\014\000\162\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\005\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\010\000\000\000\000\000\011\000\012\000\013\000\014\000\000\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\008\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\008\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\065\000\000\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\000\000\
\000\000\000\000\000\000\065\000\065\000\053\000\000\000\053\000\
\053\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\053\000\
\053\000\000\000\000\000\000\000\000\000\053\000\053\000\052\000\
\000\000\052\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\052\000\052\000\000\000\000\000\000\000\000\000\052\000\
\052\000\062\000\000\000\062\000\062\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\068\000\000\000\068\000\068\000\
\000\000\068\000\000\000\052\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\062\000\062\000\005\000\000\000\006\000\
\000\000\062\000\062\000\000\000\000\000\007\000\068\000\068\000\
\000\000\000\000\000\000\000\000\068\000\068\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\049\000\000\000\049\000\049\000\000\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\000\000\049\000\049\000\000\000\000\000\
\000\000\000\000\049\000\049\000\050\000\000\000\050\000\050\000\
\000\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\
\000\000\000\000\000\000\000\000\050\000\050\000\056\000\000\000\
\056\000\056\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
\056\000\056\000\000\000\000\000\000\000\000\000\056\000\056\000\
\057\000\000\000\057\000\057\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\057\000\057\000\057\000\057\000\057\000\
\057\000\000\000\057\000\057\000\000\000\000\000\000\000\000\000\
\057\000\057\000\058\000\000\000\058\000\058\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\058\000\058\000\000\000\000\000\
\000\000\000\000\058\000\058\000\059\000\000\000\059\000\059\000\
\000\000\059\000\000\000\000\000\000\000\054\000\000\000\054\000\
\054\000\000\000\054\000\000\000\000\000\000\000\058\000\059\000\
\059\000\059\000\059\000\059\000\059\000\000\000\059\000\059\000\
\054\000\054\000\000\000\000\000\059\000\059\000\000\000\054\000\
\054\000\000\000\000\000\000\000\000\000\054\000\054\000\055\000\
\000\000\055\000\055\000\000\000\055\000\000\000\000\000\069\000\
\059\000\069\000\069\000\070\000\069\000\070\000\070\000\000\000\
\070\000\054\000\055\000\055\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\000\000\000\000\000\000\000\000\055\000\
\055\000\069\000\069\000\000\000\000\000\070\000\070\000\069\000\
\069\000\000\000\000\000\070\000\070\000\071\000\000\000\071\000\
\071\000\000\000\071\000\055\000\000\000\072\000\000\000\072\000\
\072\000\000\000\072\000\069\000\000\000\000\000\060\000\070\000\
\060\000\060\000\000\000\060\000\000\000\000\000\000\000\071\000\
\071\000\000\000\000\000\000\000\000\000\071\000\071\000\072\000\
\072\000\000\000\000\000\000\000\000\000\072\000\072\000\000\000\
\060\000\060\000\000\000\000\000\000\000\000\000\060\000\060\000\
\000\000\071\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\072\000\062\000\063\000\064\000\065\000\066\000\067\000\
\000\000\000\000\060\000\000\000\000\000\000\000\000\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\140\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\061\000\
\000\000\000\000\000\000\082\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\000\000\061\000\000\000\000\000\000\000\085\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\061\000\
\000\000\000\000\000\000\131\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\079\000\061\000\000\000\000\000\084\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\061\000\128\000\
\000\000\000\000\129\000\062\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\061\000\150\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\061\000\000\000\000\000\000\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\061\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000"

let yycheck = "\004\000\
\000\000\004\000\002\001\001\001\003\001\006\001\003\001\004\000\
\005\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\013\001\001\001\014\000\006\001\031\001\032\001\002\001\001\000\
\032\001\025\001\006\001\054\001\027\001\040\001\027\001\002\001\
\040\001\004\001\005\001\019\001\007\001\006\001\025\001\006\001\
\054\001\037\000\006\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\051\001\051\001\054\001\050\000\000\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\059\000\034\001\
\035\001\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\023\001\051\001\054\001\051\001\081\000\002\001\051\001\
\084\000\005\001\087\000\002\001\054\001\004\001\005\001\118\000\
\007\001\008\001\009\001\010\001\011\001\012\001\099\000\002\001\
\100\000\054\001\005\001\054\001\131\000\002\001\021\001\022\001\
\023\001\024\001\025\001\026\001\005\001\028\001\029\001\006\001\
\001\001\005\001\003\001\034\001\035\001\004\001\005\001\123\000\
\009\001\004\001\005\001\004\001\005\001\129\000\002\001\158\000\
\159\000\004\001\005\001\020\001\054\001\054\001\139\000\054\001\
\032\001\002\001\142\000\004\001\005\001\030\001\007\001\156\000\
\033\001\156\000\031\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\001\001\019\001\
\003\001\034\001\035\001\040\001\054\001\003\001\009\001\054\001\
\054\001\054\001\008\001\009\001\010\001\011\001\012\001\013\001\
\054\001\020\001\001\001\040\001\003\001\054\001\002\001\002\001\
\002\001\002\001\009\001\030\001\031\001\027\001\033\001\040\001\
\144\000\036\001\037\001\038\001\039\001\020\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\002\001\255\255\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\048\001\049\001\050\001\051\001\052\001\053\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\028\001\029\001\
\255\255\001\001\255\255\003\001\034\001\035\001\255\255\255\255\
\255\255\009\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\054\001\255\255\255\255\255\255\255\255\002\001\030\001\004\001\
\005\001\033\001\007\001\255\255\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\029\001\003\001\003\001\255\255\255\255\034\001\035\001\009\001\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\054\001\027\001\255\255\030\001\255\255\255\255\033\001\
\255\255\255\255\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\001\001\255\255\003\001\255\255\
\003\001\255\255\255\255\255\255\009\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\030\001\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\001\001\255\255\003\001\255\255\003\001\255\255\
\255\255\255\255\009\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\030\001\
\255\255\255\255\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\001\001\255\255\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\002\001\255\255\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\034\001\035\001\002\001\255\255\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\054\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\002\001\
\255\255\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\054\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\034\001\
\035\001\002\001\255\255\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\002\001\255\255\004\001\005\001\
\255\255\007\001\255\255\054\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\028\001\029\001\001\001\255\255\003\001\
\255\255\034\001\035\001\255\255\255\255\009\001\028\001\029\001\
\255\255\255\255\255\255\255\255\034\001\035\001\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\054\001\255\255\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\002\001\255\255\004\001\005\001\255\255\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\002\001\255\255\004\001\005\001\
\255\255\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\054\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\034\001\035\001\002\001\255\255\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\054\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\002\001\255\255\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\034\001\035\001\002\001\255\255\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\054\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\002\001\255\255\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\054\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\028\001\029\001\
\021\001\022\001\255\255\255\255\034\001\035\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\002\001\
\255\255\004\001\005\001\255\255\007\001\255\255\255\255\002\001\
\054\001\004\001\005\001\002\001\007\001\004\001\005\001\255\255\
\007\001\054\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\034\001\
\035\001\028\001\029\001\255\255\255\255\028\001\029\001\034\001\
\035\001\255\255\255\255\034\001\035\001\002\001\255\255\004\001\
\005\001\255\255\007\001\054\001\255\255\002\001\255\255\004\001\
\005\001\255\255\007\001\054\001\255\255\255\255\002\001\054\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\028\001\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\255\255\054\001\255\255\255\255\255\255\003\001\255\255\255\255\
\255\255\054\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\054\001\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\054\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\054\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\003\001\
\255\255\255\255\255\255\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\003\001\255\255\255\255\255\255\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\003\001\
\255\255\255\255\255\255\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\002\001\003\001\255\255\255\255\034\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\003\001\004\001\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\003\001\004\001\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\003\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  ARROW\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  EXP\000\
  ADDASN\000\
  SUBASN\000\
  MULASN\000\
  DIVASN\000\
  MODASN\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RANGE\000\
  AND\000\
  OR\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  FOR\000\
  IN\000\
  DO\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  END\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  CHAR\000\
  VOID\000\
  LIST\000\
  EOL\000\
  EOF\000\
  "

let yynames_block = "\
  BLIT\000\
  LITERAL\000\
  FLIT\000\
  ID\000\
  CLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 41 "parser.mly"
            ( _1 )
# 662 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
               ( ([], [], []) )
# 668 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 45 "parser.mly"
               ( ((_2 :: fst _1), snd _1, thrd _1) )
# 676 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
               ( (fst _1, (_2 :: snd _1), thrd _1) )
# 684 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
               ( (fst _1, snd _1, (_2 :: thrd _1)) )
# 692 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'fbody) in
    Obj.repr(
# 51 "parser.mly"
 ( {
		typ = _1;
		fname = _2;
		formals = _4;
		body = { vdecls = List.rev _7.vdecls; stmts = List.rev _7.stmts }
	} )
# 707 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                ( { vdecls = []; stmts = [] } )
# 713 "parser.ml"
               : 'fbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 60 "parser.mly"
               ( { vdecls = _2 :: _1.vdecls; stmts = _1.stmts; } )
# 721 "parser.ml"
               : 'fbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 61 "parser.mly"
               ( { vdecls = _1.vdecls; stmts = _2 :: _1.stmts; } )
# 729 "parser.ml"
               : 'fbody))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                 ( [] )
# 735 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 65 "parser.mly"
                ( List.rev _1 )
# 742 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
         ( [(_1, _2)] )
# 750 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
                             ( (_3, _4) :: _1 )
# 759 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
         ( Int )
# 765 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
          ( Float )
# 771 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
          ( Bool )
# 777 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
          ( Char )
# 783 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
          ( String )
# 789 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Void )
# 795 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 78 "parser.mly"
                  ( List _3 )
# 802 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 79 "parser.mly"
                     ( _2 )
# 809 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 80 "parser.mly"
                 ( Func(_1, _3) )
# 817 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                        ( _1, _2, _4 )
# 826 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
               ( [] )
# 832 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                  ( _2 :: _1 )
# 840 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
     ( Nostmt )
# 846 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
             ( Expr _1 )
# 853 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 92 "parser.mly"
                       ( Return _2 )
# 860 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'internal_if) in
    Obj.repr(
# 93 "parser.mly"
                      ( _2 )
# 867 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 94 "parser.mly"
                                         ( For(_2, _4, Block(List.rev _6)) )
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 95 "parser.mly"
                                    ( While(_2, Block(List.rev _4)) )
# 884 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
             ( Break )
# 890 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                ( Continue )
# 896 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 98 "parser.mly"
             ( Declaration(_1) )
# 903 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_list) in
    Obj.repr(
# 101 "parser.mly"
                                               ( If(_1, Block(List.rev _4), Block(List.rev _5), Block(List.rev _6)))
# 913 "parser.ml"
               : 'internal_if))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
               ( [] )
# 919 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 105 "parser.mly"
                  ( _1 :: _2 )
# 927 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 108 "parser.mly"
                           ( Elif(_2, Block(List.rev _4)) )
# 935 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
               ( [] )
# 941 "parser.ml"
               : 'else_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 112 "parser.mly"
                      ( _3 )
# 948 "parser.ml"
               : 'else_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
               ( Noexpr )
# 954 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
        ( _1 )
# 961 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 119 "parser.mly"
           ( IntLit(_1) )
# 968 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 120 "parser.mly"
            ( FloatLit(_1) )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 121 "parser.mly"
            ( BoolLit(_1) )
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 122 "parser.mly"
            ( CharLit(_1) )
# 989 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "parser.mly"
            (StringLit(_1))
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_literal) in
    Obj.repr(
# 124 "parser.mly"
                                 ( ListLit(List.rev _2) )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 1019 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 1027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 1035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                    ( Binop(_1, Exp,   _3)   )
# 1043 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 1051 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 1059 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 1067 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 1075 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 1083 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 1091 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 1099 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 1107 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 1115 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                     ( Binop(_1, Range, _3)   )
# 1123 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                         ( Unop(Neg, _2)      )
# 1130 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                         ( Unop(Not, _2)      )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                         ( _2                 )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                   ( Assign(_1, _3) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                   ( AssignOp(_1, Add, _3) )
# 1160 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                   ( AssignOp(_1, Sub, _3) )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                   ( AssignOp(_1, Mult, _3) )
# 1176 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                   ( AssignOp(_1, Div, _3) )
# 1184 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                   ( AssignOp(_1, Mod, _3) )
# 1192 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 149 "parser.mly"
                             ( Call(_1, _3) )
# 1200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                             ( SliceExpr(_1, Index(_3)) )
# 1208 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                                        ( SliceExpr(_1, Slice(_3, _5)) )
# 1217 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
               ( [] )
# 1223 "parser.ml"
               : 'list_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
               ( [_1] )
# 1230 "parser.ml"
               : 'list_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list_literal) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                           ( _3 :: _1 )
# 1238 "parser.ml"
               : 'list_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
               ( [] )
# 1244 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 160 "parser.mly"
               ( List.rev _1 )
# 1251 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
        ( [_1] )
# 1258 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                        ( _3 :: _1 )
# 1266 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
