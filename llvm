; ModuleID = 'TEAM'
source_filename = "TEAM"

%list_item = type <{ i8*, %list_item* }>

@a = global %list_item** null

declare i32 @printf(i8*, ...)

declare double @pow(double, double)

declare i1 @match(i8*, i8*)

declare i8* @find(i8*, i8*)

declare i8* @replace(i8*, i8*, i8*, i32)

declare i8* @replace_all(i8*, i8*, i8*)

declare %list_item** @find_all(i8*, i8*)

define i32 @main() {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32))
  %list = bitcast i8* %malloccall to %list_item**
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (%list_item* getelementptr (%list_item, %list_item* null, i32 1) to i32))
  %list_item = bitcast i8* %malloccall1 to %list_item*
  store %list_item zeroinitializer, %list_item* %list_item, align 1
  %malloccall2 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %copied = bitcast i8* %malloccall2 to i32*
  store i32 2, i32* %copied, align 4
  %cast_ptr = bitcast i32* %copied to i8*
  %data_ptr_container = getelementptr inbounds %list_item, %list_item* %list_item, i32 0, i32 0
  store i8* %cast_ptr, i8** %data_ptr_container, align 8
  %next = getelementptr inbounds %list_item, %list_item* %list_item, i32 0, i32 1
  store %list_item* null, %list_item** %next, align 8
  %malloccall3 = tail call i8* @malloc(i32 ptrtoint (%list_item* getelementptr (%list_item, %list_item* null, i32 1) to i32))
  %list_item4 = bitcast i8* %malloccall3 to %list_item*
  store %list_item zeroinitializer, %list_item* %list_item4, align 1
  %malloccall5 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %copied6 = bitcast i8* %malloccall5 to i32*
  store i32 1, i32* %copied6, align 4
  %cast_ptr7 = bitcast i32* %copied6 to i8*
  %data_ptr_container8 = getelementptr inbounds %list_item, %list_item* %list_item4, i32 0, i32 0
  store i8* %cast_ptr7, i8** %data_ptr_container8, align 8
  %next9 = getelementptr inbounds %list_item, %list_item* %list_item4, i32 0, i32 1
  store %list_item* %list_item, %list_item** %next9, align 8
  store %list_item* %list_item4, %list_item** %list, align 8
  store %list_item** %list, %list_item*** @a, align 8
  %a = load %list_item**, %list_item*** @a, align 8
  %reversed_list = call %list_item** @list_reverse(%list_item** %a)
  ret i32 0
}

declare noalias i8* @malloc(i32)

define %list_item** @list_reverse(%list_item** %0) {
entry:
  %list_ptr = load %list_item*, %list_item** %0, align 8
  %ptr_is_null = icmp eq %list_item* %list_ptr, null
  br i1 %ptr_is_null, label %then, label %else

then:                                             ; preds = %entry
  ret %list_item** %0

else:                                             ; preds = %entry
  %next_ptr_ptr = getelementptr inbounds %list_item, %list_item* %list_ptr, i32 0, i32 1
  %next_ptr = load %list_item*, %list_item** %next_ptr_ptr, align 8
  %next_ptr_is_null = icmp eq %list_item* %next_ptr, null
  br i1 %next_ptr_is_null, label %then_, label %else_

then_:                                            ; preds = %else
  ret %list_item** %0

else_:                                            ; preds = %else
  %result = call %list_item** @list_reverse_helper(%list_item** %0, %list_item** %next_ptr_ptr)
  store %list_item zeroinitializer, %list_item* %next_ptr, align 1
  ret %list_item** %result
}

define %list_item** @list_reverse_helper(%list_item** %0, %list_item** %1) {
entry:
  %prev_node_ptr = load %list_item*, %list_item** %0, align 8
  %curr_node_ptr = load %list_item*, %list_item** %1, align 8
  %next_node_ptr_ptr = getelementptr inbounds %list_item, %list_item* %curr_node_ptr, i32 0, i32 1
  %next_node_ptr = load %list_item*, %list_item** %next_node_ptr_ptr, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32))
  %temp_ptr_ptr = bitcast i8* %malloccall to %list_item**
  store %list_item* %next_node_ptr, %list_item** %temp_ptr_ptr, align 8
  %ptr_is_null = icmp eq %list_item* %next_node_ptr, null
  store %list_item* %prev_node_ptr, %list_item** %next_node_ptr_ptr, align 8
  br i1 %ptr_is_null, label %then, label %else

then:                                             ; preds = %entry
  ret %list_item** %1

else:                                             ; preds = %entry
  %result = call %list_item** @list_reverse_helper(%list_item** %1, %list_item** %temp_ptr_ptr)
  ret %list_item** %result
}
