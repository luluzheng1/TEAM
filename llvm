; ModuleID = 'TEAM'
source_filename = "TEAM"

@fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.1 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@fmt.2 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@for_index = global i32 0
@target = global i8* null
@string = private unnamed_addr constant [2 x i8] c"h\00", align 1
@c = global i8 0

declare i32 @printf(i8*, ...)

declare double @pow(double, double)

define i32 @main() {
entry:
  store i32 0, i32* @for_index, align 4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string, i32 0, i32 0), i8** @target, align 8
  store i8 0, i8* @c, align 1
  br label %while

while:                                            ; preds = %while_body, %entry
  %for_index2 = load i32, i32* @for_index, align 4
  %target3 = load i8*, i8** @target, align 8
  %length = call i32 @string_length(i8* %target3, i32 0)
  %tmp4 = icmp slt i32 %for_index2, %length
  br i1 %tmp4, label %while_body, label %merge

merge:                                            ; preds = %while
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.2, i32 0, i32 0), i8 104)
  ret i32 0

while_body:                                       ; preds = %while
  %target = load i8*, i8** @target, align 8
  %for_index = load i32, i32* @for_index, align 4
  %get_char_ptr = getelementptr i8, i8* %target, i32 %for_index
  %get_char = load i8, i8* %get_char_ptr, align 1
  store i8 %get_char, i8* @c, align 1
  %for_index1 = load i32, i32* @for_index, align 4
  %tmp = add i32 %for_index1, 1
  store i32 %tmp, i32* @for_index, align 4
  br label %while
}

define i32 @string_length(i8* %0, i32 %1) {
entry:
  %char = load i8, i8* %0, align 1
  %ptr_is_null = icmp eq i8 %char, 0
  br i1 %ptr_is_null, label %then, label %else

then:                                             ; preds = %entry
  ret i32 %1

else:                                             ; preds = %entry
  %next_ptr = getelementptr i8, i8* %0, i32 1
  %add = add i32 %1, 1
  %result = call i32 @string_length(i8* %next_ptr, i32 %add)
  ret i32 %result
}
