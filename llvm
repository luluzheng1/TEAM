; ModuleID = 'TEAM'
source_filename = "TEAM"

%list_item = type <{ i8*, %list_item* }>

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@a = global %list_item** null

declare i32 @printf(i8*, ...)

declare double @pow(double, double)

define i32 @main() {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32))
  %list = bitcast i8* %malloccall to %list_item**
  store %list_item* null, %list_item** %list, align 8
  %range_list = call %list_item** @range(i32 1, i32 2, %list_item** %list, i32 0)
  store %list_item** %range_list, %list_item*** @a, align 8
  ret i32 0
}

define %list_item** @range(i32 %0, i32 %1, %list_item** %2, i32 %3) {
entry:
  %head_ptr = load %list_item*, %list_item** %2, align 8
  %is_last = icmp eq i32 %0, %1
  br i1 %is_last, label %then, label %else

then:                                             ; preds = %entry
  ret %list_item** %2

else:                                             ; preds = %entry
  %head_ptr_ptr = call %list_item** @insert_int(%list_item* %head_ptr, i32 %0, i32 %3)
  %next_s = add i32 1, %0
  %next_length = add i32 1, %3
  %4 = call %list_item** @range(i32 %next_s, i32 %1, %list_item** %head_ptr_ptr, i32 %next_length)
  ret %list_item** %4
}

define %list_item** @insert_int(%list_item* %0, i32 %1, i32 %2) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32))
  %new_list_ptr_ptr = bitcast i8* %malloccall to %list_item**
  %last_node_ptr_ptr = call %list_item** @list_copy_int(%list_item* %0, i32 -1, %list_item** %new_list_ptr_ptr)
  %list_ptr = load %list_item*, %list_item** %new_list_ptr_ptr, align 8
  %temp = alloca %list_item, align 8
  %next = getelementptr inbounds %list_item, %list_item* %temp, i32 0, i32 1
  store %list_item* %list_ptr, %list_item** %next, align 8
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (%list_item* getelementptr (%list_item, %list_item* null, i32 1) to i32))
  %data_node = bitcast i8* %malloccall1 to %list_item*
  %malloccall2 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %data = bitcast i8* %malloccall2 to i32*
  store i32 %1, i32* %data, align 4
  %dat = getelementptr inbounds %list_item, %list_item* %data_node, i32 0, i32 0
  %cast = bitcast i32* %data to i8*
  store i8* %cast, i8** %dat, align 8
  %result = call %list_item* @list_access(%list_item* %temp, i32 %2)
  %test = getelementptr inbounds %list_item, %list_item* %result, i32 0, i32 1
  %dat3 = getelementptr inbounds %list_item, %list_item* %data_node, i32 0, i32 1
  %temp4 = load %list_item*, %list_item** %test, align 8
  store %list_item* %temp4, %list_item** %dat3, align 8
  store %list_item* %data_node, %list_item** %test, align 8
  %temp5 = load %list_item*, %list_item** %next, align 8
  store %list_item* %temp5, %list_item** %new_list_ptr_ptr, align 8
  ret %list_item** %new_list_ptr_ptr
}

declare noalias i8* @malloc(i32)

define %list_item** @list_copy_int(%list_item* %0, i32 %1, %list_item** %2) {
entry:
  %is_zero = icmp eq i32 %1, 0
  %ptr_is_null = icmp eq %list_item* %0, null
  %or_conds = or i1 %is_zero, %ptr_is_null
  br i1 %or_conds, label %then, label %else

then:                                             ; preds = %entry
  ret %list_item** %2

else:                                             ; preds = %entry
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%list_item* getelementptr (%list_item, %list_item* null, i32 1) to i32))
  %new_struct_ptr = bitcast i8* %malloccall to %list_item*
  store %list_item zeroinitializer, %list_item* %new_struct_ptr, align 1
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %ltyp = bitcast i8* %malloccall1 to i32*
  %old_data_ptr_ptr = getelementptr inbounds %list_item, %list_item* %0, i32 0, i32 0
  %old_data_ptr = load i8*, i8** %old_data_ptr_ptr, align 8
  %cast_old_data_ptr = bitcast i8* %old_data_ptr to i32*
  %old_data = load i32, i32* %cast_old_data_ptr, align 4
  store i32 %old_data, i32* %ltyp, align 4
  %data_ptr_cast = bitcast i32* %ltyp to i8*
  %store_new_data = getelementptr inbounds %list_item, %list_item* %new_struct_ptr, i32 0, i32 0
  store i8* %data_ptr_cast, i8** %store_new_data, align 8
  store %list_item* %new_struct_ptr, %list_item** %2, align 8
  %next = getelementptr inbounds %list_item, %list_item* %new_struct_ptr, i32 0, i32 1
  %next_ptr = getelementptr inbounds %list_item, %list_item* %0, i32 0, i32 1
  %next2 = load %list_item*, %list_item** %next_ptr, align 8
  %sub = sub i32 %1, 1
  %3 = call %list_item** @list_copy_int(%list_item* %next2, i32 %sub, %list_item** %next)
  ret %list_item** %3
}

define %list_item* @list_access(%list_item* %0, i32 %1) {
entry:
  %is_zero = icmp eq i32 %1, 0
  br i1 %is_zero, label %then, label %else

then:                                             ; preds = %entry
  ret %list_item* %0

else:                                             ; preds = %entry
  %next_ptr = getelementptr inbounds %list_item, %list_item* %0, i32 0, i32 1
  %next = load %list_item*, %list_item** %next_ptr, align 8
  %sub = sub i32 %1, 1
  %result = call %list_item* @list_access(%list_item* %next, i32 %sub)
  ret %list_item* %result
}
